#if defined(USE_MULTISAMPLE_TEXTURES)
#extension GL_ARB_texture_multisample : enable
#endif

#define tsampler2D sampler2D

vec4 ttexture(tsampler2D iSampler, vec2 vecCoordinates)
{
	return texture(iSampler, vecCoordinates);
}

// These common functions will be included in the build of every other shader.

float RemapVal(float flInput, float flInLo, float flInHi, float flOutLo, float flOutHi)
{
	return (((flInput-flInLo) / (flInHi-flInLo)) * (flOutHi-flOutLo)) + flOutLo;
}

float RemapValClamped(float flInput, float flInLo, float flInHi, float flOutLo, float flOutHi)
{
	if (flInput < flInLo)
		return flOutLo;
	if (flInput > flInHi)
		return flOutHi;
	return (((flInput-flInLo) / (flInHi-flInLo)) * (flOutHi-flOutLo)) + flOutLo;
}

float Clamped(float flInput, float flLo, float flHi)
{
	if (flInput < flLo)
		return flLo;
	if (flInput > flHi)
		return flHi;
	return flInput;
}

float LengthSqr(vec3 v)
{
	return v.x*v.x + v.y*v.y + v.z*v.z;
}

float LengthSqr(vec2 v)
{
	return v.x*v.x + v.y*v.y;
}

float Length2DSqr(vec3 v)
{
	return v.x*v.x + v.z*v.z;
}

float Lerp(float x, float flLerp)
{
	if (flLerp == 0.5)
		return x;

	return pow(x, log(flLerp) * -1.4427);
}

float DistanceToLineSegmentSqr(vec3 p, vec3 v1, vec3 v2)
{
	float flResult;
	vec3 v = v2 - v1;
	vec3 w = p - v1;
	float c1 = dot(w, v);
	if (c1 < 0.0)
		flResult = LengthSqr(v1-p);
	else
	{
		float c2 = dot(v, v);
		if (c2 < c1)
			flResult = LengthSqr(v2-p);
		else
		{
			float b = c1/c2;
			vec3 vb = v1 + v*b;
			flResult = LengthSqr(vb - p);
		}
	}
	return flResult;
}

float AngleDifference(float a, float b)
{
	float flYawDifference = a - b;
	if ( a > b )
		while ( flYawDifference >= 180.0 )
			flYawDifference -= 360.0;
	else
		while ( flYawDifference <= -180.0 )
			flYawDifference += 360.0;
	return flYawDifference;
}

float Rand(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}
